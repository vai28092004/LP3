import java.util.Scanner;

public class LA6 {
    static final int N = 8;
    static int[][] board = new int[N][N];

    // Check if placing a queen at board[row][col] is safe
    static boolean isSafe(int row, int col) {
        // Check this column on upper side
        for (int i = 0; i < row; i++) {
            if (board[i][col] == 1) {
                return false;
            }
        }

        // Check upper left diagonal
        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 1) {
                return false;
            }
        }

        // Check upper right diagonal
        for (int i = row, j = col; i >= 0 && j < N; i--, j++) {
            if (board[i][j] == 1) {
                return false;
            }
        }

        return true;
    }

    // Solve using backtracking
    static boolean solve(int row) {
        // If all 8 queens are placed
        if (row >= N) {
            return true;
        }

        for (int col = 0; col < N; col++) {
            if (isSafe(row, col)) {
                board[row][col] = 1;

                // Recur to place rest of the queens
                if (solve(row + 1)) {
                    return true;
                }

                // Backtrack if placing queen here doesn't lead to a solution
                board[row][col] = 0;
            }
        }
        return false;
    }

    // Display the board
    static void printBoard() {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                System.out.print((board[i][j] == 1 ? "Q " : ". "));
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get initial queen position from user
        System.out.print("Enter the row (0-7) for the first queen: ");
        int initialRow = scanner.nextInt();
        System.out.print("Enter the column (0-7) for the first queen: ");
        int initialCol = scanner.nextInt();

        // Place the first queen
        board[initialRow][initialCol] = 1;

        // Start solving from the next row
        if (solve(0)) {
            System.out.println("Solution to 8-Queens problem:");
            printBoard();
        } else {
            System.out.println("No solution found.");
        }

        scanner.close();
    }
}
