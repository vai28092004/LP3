// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ProductInventory {
    // Structure to represent a product
    struct Product {
        uint256 id;
        string name;
        uint256 stock;
    }

    // Mapping to store products by their ID
    mapping(uint256 => Product) public products;
    
    // Mapping to check if a product ID exists
    mapping(uint256 => bool) private productExists;

    // Event for product received
    event ProductReceived(uint256 id, string name, uint256 quantity);

    // Event for product sold
    event ProductSold(uint256 id, string name, uint256 quantity);

    // Function to add new product or receive more stock of an existing product
    function receiveProduct(uint256 _id, string memory _name, uint256 _quantity) public {
        if (productExists[_id]) {
            // If the product already exists, just increase the stock
            products[_id].stock += _quantity;
        } else {
            // If it's a new product, add it to the inventory
            products[_id] = Product(_id, _name, _quantity);
            productExists[_id] = true;
        }
        emit ProductReceived(_id, _name, _quantity);
    }

    // Function to sell a product
    function sellProduct(uint256 _id, uint256 _quantity) public {
        require(productExists[_id], "Product does not exist");
        require(products[_id].stock >= _quantity, "Insufficient stock");

        products[_id].stock -= _quantity;
        emit ProductSold(_id, products[_id].name, _quantity);
    }

    // Function to display current stock of a product by ID
    function displayStock(uint256 _id) public view returns (uint256) {
        require(productExists[_id], "Product does not exist");
        return products[_id].stock;
    }
}
