ML2[email]

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
from sklearn import metrics
from sklearn.preprocessing import scale

df = pd.read_csv('emails.csv')

df.dropna(inplace=True)

print(df.head())

df.drop(['Email No.'],axis=1,inplace=True)
X = df.drop(['Prediction'],axis = 1)
y = df['Prediction']

from sklearn.preprocessing import scale
X = scale(X)
# split into train and test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42)


knn = KNeighborsClassifier(n_neighbors=7)
knn.fit(X_train, y_train)
y_pred_knn = knn.predict(X_test)

print("KNN Accuracy = ", metrics.accuracy_score(y_test, y_pred_knn))
print("KNN Confusion Matrix:\n", metrics.confusion_matrix(y_test, y_pred_knn))
print("KNN Classification Report:\n", metrics.classification_report(y_test, y_pred_knn))

svm = SVC(kernel='linear')  # Linear kernel
svm.fit(X_train, y_train)
y_pred_svm = svm.predict(X_test)

print("SVM Accuracy = ", metrics.accuracy_score(y_test, y_pred_svm))
print("SVM Confusion Matrix:\n", metrics.confusion_matrix(y_test, y_pred_svm))
print("SVM Classification Report:\n", metrics.classification_report(y_test, y_pred_svm))

