// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BankAccount {
    // Store the owner's address and their balance
    address public owner;
    uint256 private balance;

    // Event to log deposits and withdrawals
    event Deposited(address indexed account, uint256 amount);
    event Withdrawn(address indexed account, uint256 amount);

    // Modifier to ensure only the owner can withdraw
    modifier onlyOwner() {
        require(msg.sender == owner, "You are not the account owner.");
        _;
    }

    // Constructor to initialize the owner of the account
    constructor() {
        owner = msg.sender; // Set the account owner to the address that deploys the contract
        balance = 0;         // Initial balance is set to 0
    }

    // Function to deposit money into the account
    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than 0");
        balance += msg.value;
        emit Deposited(msg.sender, msg.value);
    }

    // Function to withdraw money from the account
    function withdraw(uint256 amount) public onlyOwner {
        require(amount <= balance, "Insufficient balance");
        balance -= amount;
        payable(msg.sender).transfer(amount);
        emit Withdrawn(msg.sender, amount);
    }

    // Function to check the balance of the account
    function getBalance() public view returns (uint256) {
        return balance;
    }
}
