// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentData {
    // Define a structure to represent a student
    struct Student {
        uint256 id;
        string name;
        uint256 age;
        string department;
    }

    // Array to store student data
    Student[] public students;

    // Mapping to track if a student ID already exists
    mapping(uint256 => bool) private studentExists;

    // Event to log student addition
    event StudentAdded(uint256 id, string name, uint256 age, string department);

    // Event to log Ether received
    event EtherReceived(address indexed sender, uint256 amount);

    // Function to add a new student
    function addStudent(uint256 _id, string memory _name, uint256 _age, string memory _department) public {
        require(!studentExists[_id], "Student ID already exists.");
        Student memory newStudent = Student(_id, _name, _age, _department);
        students.push(newStudent);
        studentExists[_id] = true;
        emit StudentAdded(_id, _name, _age, _department);
    }

    // Function to retrieve a student's information by index
    function getStudent(uint256 index) public view returns (uint256, string memory, uint256, string memory) {
        require(index < students.length, "Index out of bounds");
        Student memory s = students[index];
        return (s.id, s.name, s.age, s.department);
    }

    // Fallback function to handle any direct transfers or unknown function calls
    fallback() external payable {
        emit EtherReceived(msg.sender, msg.value);
    }

    // Receive function to accept Ether directly to the contract
    receive() external payable {
        emit EtherReceived(msg.sender, msg.value);
    }

    // Function to get the total number of students
    function getStudentCount() public view returns (uint256) {
        return students.length;
    }

    // Function to check the contract balance
    function getContractBalance() public view returns (uint256) {
        return address(this).balance;
    }
}
